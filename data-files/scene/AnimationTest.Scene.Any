
/* -*- c++ -*- */
{ 
    entities = { 
        blueLight = Light { 
            attenuation = ( 0.0001, 0, 1 ); 
            bulbPower = Power3(0, 50, 150 ); 
            canChange = false; 
            castsShadows = false; 
            extent = Vector2(1, 1 ); 
            farPlaneZLimit = -10; 
            frame = CFrame::fromXYZYPRDegrees(-3.16422, 1.67099, 1.94762, -66.4284, -22.3804, -15.9777 ); 
            nearPlaneZLimit = -1; 
            rectangular = true; 
            shadowMapSize = Vector2int16(4096, 4096 ); 
            shadowsEnabled = true; 
            spotHalfAngleDegrees = 87; 
            type = "AREA"; 
            varianceShadowSettings = VSMSettings { 
                baseSize = Vector2int16(4096, 4096 ); 
                blurMultiplier = 10; 
                downsampleFactor = 2; 
                enabled = false; 
                filterRadius = 11; 
            }; 
            
        }; 
        
        camera = Camera { 
            depthOfFieldSettings = DepthOfFieldSettings { 
                enabled = false; 
                farBlurRadiusFraction = 0.005; 
                farBlurryPlaneZ = -100; 
                farSharpPlaneZ = -40; 
                focusPlaneZ = -10; 
                lensRadius = 0.01; 
                model = "NONE"; 
                nearBlurRadiusFraction = 0.015; 
                nearBlurryPlaneZ = -0.25; 
                nearSharpPlaneZ = -1; 
                reducedResolutionFactor = 1; 
            }; 
            
            filmSettings = FilmSettings { 
                antialiasingEnabled = true; 
                antialiasingFilterRadius = 0; 
                antialiasingHighQuality = true; 
                bloomRadiusFraction = 0.009; 
                bloomStrength = 0.2; 
                debugZoom = 1; 
                effectsEnabled = true; 
                gamma = 2.2; 
                sensitivity = 1; 
                temporalAntialiasingEnabled = true; 
                toneCurve = Spline { 
                    control = ( 0, 0.0787234, 0.306383, 0.75532, 0.92 ); 
                    extrapolationMode = "LINEAR"; 
                    finalInterval = -1; 
                    interpolationMode = "CUBIC"; 
                    time = ( 0, 0.169565, 0.339131, 0.752174, 1 ); 
                }; 
                
                vignetteBottomStrength = 0; 
                vignetteSizeFraction = 0; 
                vignetteTopStrength = 0; 
            }; 
            
            frame = CFrame::fromXYZYPRDegrees(17.895, 3.666, 6.8261, 68.755, -11.173, 0 ); 
            motionBlurSettings = MotionBlurSettings { 
                enabled = false; 
                exposureFraction = 0.75; 
                maxBlurDiameterFraction = 0.1; 
                numSamples = 27; 
            }; 
            
            overridePixelOffset = true; 
            projection = Projection { 
                farPlaneZ = -inf; 
                fovDegrees = 13; 
                fovDirection = "VERTICAL"; 
                nearPlaneZ = -0.15; 
                pixelOffset = Vector2(0.0625, -0.462963 ); 
            }; 
            
            track = PFrameSpline { 
                control = ( 
                    CFrame::fromXYZYPRDegrees(17.895, 3.666, 6.8261, 68.755, -11.173 ), 
                    CFrame::fromXYZYPRDegrees(17.9336, 3.49438, 4.32897, 82.6628, -10.8533, -2.66953 ) ); 
                
                extrapolationMode = "CYCLIC"; 
                finalInterval = -1; 
                interpolationMode = "CUBIC"; 
                time = ( 0, 5 ); 
            }; 
            
            visualizationScale = 1; 
        }; 
        
        cube = VisibleEntity { 
            frame = CFrame::fromXYZYPRDegrees(0, -0.490833, 0 ); 
            model = "cubeModel"; 
            track = PFrameSpline { 
                control = ( 
                    CFrame::fromXYZYPRDegrees(0, -0.416459, 0 ), 
                    CFrame::fromXYZYPRDegrees(1.72473, 0.074489, -0.752333, 46.2871, 36.8731 ), 
                    CFrame::fromXYZYPRDegrees(-0.372908, 0.27239, -2.0327, -64.9912, -2.56132e-06, 20.4907 ) ); 
                
                extrapolationMode = "CYCLIC"; 
                finalInterval = -1; 
                interpolationMode = "CUBIC"; 
                time = ( 0, 1, 3 ); 
            }; 
            
        }; 
        
        ground = VisibleEntity { 
            canChange = false; 
            castsShadows = false; 
            frame = CFrame::fromXYZYPRDegrees(0, -1, 0, 0 ); 
            model = "groundModel"; 
        }; 
        
        redLight = Light { 
            attenuation = ( 0.0001, 0, 1 ); 
            bulbPower = Power3(100, 0, 0 ); 
            canChange = false; 
            castsShadows = false; 
            extent = Vector2(1, 1 ); 
            farPlaneZLimit = -10; 
            frame = CFrame::fromXYZYPRDegrees(1.2229, 1.56694, -2.40961, 178.224, -35.8898, -1.27904 ); 
            nearPlaneZLimit = -1; 
            rectangular = true; 
            shadowMapSize = Vector2int16(4096, 4096 ); 
            shadowsEnabled = true; 
            spotHalfAngleDegrees = 87; 
            type = "AREA"; 
            varianceShadowSettings = VSMSettings { 
                baseSize = Vector2int16(4096, 4096 ); 
                blurMultiplier = 10; 
                downsampleFactor = 2; 
                enabled = false; 
                filterRadius = 11; 
            }; 
            
        }; 
        
        yellowLight = Light { 
            attenuation = ( 0.0001, 0, 1 ); 
            bulbPower = Power3(75, 75, 0 ); 
            canChange = false; 
            castsShadows = false; 
            extent = Vector2(1, 1 ); 
            farPlaneZLimit = -10; 
            frame = CFrame::fromXYZYPRDegrees(-1.57525, 0.875672, -0.844013, -120.094, -27.5349, 4.37804 ); 
            nearPlaneZLimit = -1; 
            rectangular = true; 
            shadowMapSize = Vector2int16(4096, 4096 ); 
            shadowsEnabled = true; 
            spotHalfAngleDegrees = 87; 
            track = PFrameSpline { 
                control = ( 
                    CFrame::fromXYZYPRDegrees(-2.05406, 0.395624, -1.06241, -117.102, 13.9446, 3.99937 ), 
                    CFrame::fromXYZYPRDegrees(1.64281, 2.28834, 0.763274, 78.0763, -76.287, 163.409 ) ); 
                
                extrapolationMode = "CYCLIC"; 
                finalInterval = -1; 
                interpolationMode = "CUBIC"; 
                time = ( 0, 1 ); 
            }; 
            
            type = "AREA"; 
            varianceShadowSettings = VSMSettings { 
                baseSize = Vector2int16(4096, 4096 ); 
                blurMultiplier = 10; 
                downsampleFactor = 2; 
                enabled = false; 
                filterRadius = 11; 
            }; 
            
        }; 
        
    }; 
    
    lightingEnvironment = LightingEnvironment { 
        ambientOcclusionSettings = AmbientOcclusionSettings { 
            bias = 0; 
            blurRadius = 4; 
            blurStepSize = 2; 
            depthPeelSeparationHint = 0.01; 
            edgeSharpness = 1; 
            enabled = false; 
            highQualityBlur = true; 
            intensity = 0.5; 
            monotonicallyDecreasingBilateralWeights = false; 
            numSamples = 20; 
            packBlurKeys = false; 
            radius = 1.5; 
            temporalFilterSettings = TemporalFilter::Settings { 
                falloffEndDistance = 0.07; 
                falloffStartDistance = 0.05; 
                hysteresis = 0; 
            }; 
            
            temporallyVarySamples = false; 
            useDepthPeelBuffer = false; 
            useNormalBuffer = true; 
            useNormalsInBlur = true; 
            zStorage = "HALF"; 
        }; 
        
        environmentMap = Texture::Specification { 
            encoding = Color3(0.005 ); 
        }; 
        
    }; 
    
    models = { 
        cubeModel = ArticulatedModel::Specification { 
            filename = "model/cube/cube.obj"; 
            preprocess = { 
                setMaterial(all(),                     
                    UniversalMaterial::Specification { 
                        bump = "material/metalcrate/metalcrate-bump.png", 
                        glossy = Texture::Specification { 
                            alphaFilename = "material/metalcrate/metalcrate-glossy.png"; 
                            encoding = Color4(
                                Color3(0.4 ), 
                                0.1 ); 
                            
                            filename = "material/metalcrate/metalcrate-glossy.png"; 
                        }, 
                        
                        lambertian = "material/metalcrate/metalcrate-lambertian.png", 
                    } ) }; 
            
            stripMaterials = true; 
        }; 
        
        groundModel = ArticulatedModel::Specification { 
            filename = "ifs/squarex8.ifs"; 
            preprocess = { 
                setCFrame(root(), CFrame::fromXYZYPRDegrees(0, 0, 0, 0, -90, 0 ) ); 
                setTwoSided("mesh", true ); 
                setMaterial(all(), 
                    /* -*- c++ -*-
                    Load this with the Material::Specification(const Any&) constructor or
                    #include() inside another Any file. */
                    UniversalMaterial::Specification { 
                        bump = "material/stonewall/stonewall-B.png"; 
                        glossy = Color4(
                            Color3(0.03 ), 
                            0.1 ); 
                        
                        lambertian = "material/stonewall/stonewall-L.jpg"; 
                    } ) }; 
            
            scale = 15; 
        }; 
        
    }; 
    
    name = "Animation Test"; 
} 
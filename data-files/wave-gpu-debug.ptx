//
// Generated by NVIDIA NVVM Compiler
//
// Compiler Build ID: CL-23083092
// Cuda compilation tools, release 9.1, V9.1.85
// Based on LLVM 3.4svn
//

.version 6.1
.target sm_61
.address_size 64

	// .globl	_Z9intersecti
.global .align 4 .u32 rayOriginSampler;
.global .align 4 .u32 rayDirectionSampler;
.global .align 4 .b8 root[4];
.global .align 8 .b8 launch_index[8];
.global .align 4 .u32 backfaceTest;
.global .align 4 .u32 alphaTest;
.global .align 4 .u32 lod;
.global .align 4 .f32 partialCoverageThreshold;
.global .align 1 .b8 hitOutBuffer[1];
.global .align 1 .b8 material0OutBuffer[1];
.global .align 1 .b8 material1OutBuffer[1];
.global .align 1 .b8 material2OutBuffer[1];
.global .align 1 .b8 material3OutBuffer[1];
.global .align 1 .b8 hitLocationOutBuffer[1];
.global .align 1 .b8 shadingNormalOutBuffer[1];
.global .align 1 .b8 positionOutBuffer[1];
.global .align 1 .b8 geometricNormalOutBuffer[1];
.global .align 1 .b8 vertexPosition[1];
.global .align 1 .b8 vertexTexcoord[1];
.global .align 1 .b8 vertexNormal[1];
.global .align 1 .b8 vertexTangent[1];
.global .align 1 .b8 geometryMaterialIndex[1];
.global .align 1 .b8 geometryIndex[1];
.global .align 16 .b8 hit_attr[176];
.global .align 4 .b8 ray[36];
.global .align 4 .u32 texNSampler;
.global .align 16 .b8 texNScale[16];
.global .align 16 .b8 texNBias[16];
.global .align 4 .u32 tex0Sampler;
.global .align 16 .b8 tex0Scale[16];
.global .align 16 .b8 tex0Bias[16];
.global .align 4 .u32 tex1Sampler;
.global .align 16 .b8 tex1Scale[16];
.global .align 16 .b8 tex1Bias[16];
.global .align 4 .u32 tex2Sampler;
.global .align 16 .b8 tex2Scale[16];
.global .align 16 .b8 tex2Bias[16];
.global .align 4 .u32 tex3Sampler;
.global .align 16 .b8 tex3Scale[16];
.global .align 16 .b8 tex3Bias[16];
.global .align 4 .u32 hasAlpha;
.global .align 4 .f32 constant;
.global .align 16 .b8 hit_prd[176];
.global .align 4 .b8 _ZN21rti_internal_typeinfo16rayOriginSamplerE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo19rayDirectionSamplerE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo4rootE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12launch_indexE[8] = {82, 97, 121, 0, 8, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo12backfaceTestE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9alphaTestE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3lodE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo24partialCoverageThresholdE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8hit_attrE[8] = {82, 97, 121, 0, 176, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo3rayE[8] = {82, 97, 121, 0, 36, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11texNSamplerE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9texNScaleE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8texNBiasE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11tex0SamplerE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9tex0ScaleE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tex0BiasE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11tex1SamplerE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9tex1ScaleE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tex1BiasE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11tex2SamplerE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9tex2ScaleE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tex2BiasE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo11tex3SamplerE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo9tex3ScaleE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8tex3BiasE[8] = {82, 97, 121, 0, 16, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8hasAlphaE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo8constantE[8] = {82, 97, 121, 0, 4, 0, 0, 0};
.global .align 4 .b8 _ZN21rti_internal_typeinfo7hit_prdE[8] = {82, 97, 121, 0, 176, 0, 0, 0};
.global .align 8 .u64 _ZN21rti_internal_register20reg_bitness_detectorE;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail0E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail1E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail2E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail3E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail4E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail5E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail6E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail7E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail8E;
.global .align 8 .u64 _ZN21rti_internal_register24reg_exception_64_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail0E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail1E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail2E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail3E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail4E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail5E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail6E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail7E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail8E;
.global .align 4 .u32 _ZN21rti_internal_register21reg_exception_detail9E;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_xE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_yE;
.global .align 4 .u32 _ZN21rti_internal_register14reg_rayIndex_zE;
.global .align 4 .b8 _ZN21rti_internal_typename16rayOriginSamplerE[4] = {105, 110, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename19rayDirectionSamplerE[4] = {105, 110, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename4rootE[9] = {114, 116, 79, 98, 106, 101, 99, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename12launch_indexE[6] = {117, 105, 110, 116, 50, 0};
.global .align 4 .b8 _ZN21rti_internal_typename12backfaceTestE[4] = {105, 110, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename9alphaTestE[4] = {105, 110, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename3lodE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename24partialCoverageThresholdE[6] = {102, 108, 111, 97, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename8hit_attrE[4] = {72, 105, 116, 0};
.global .align 16 .b8 _ZN21rti_internal_typename3rayE[11] = {111, 112, 116, 105, 120, 58, 58, 82, 97, 121, 0};
.global .align 4 .b8 _ZN21rti_internal_typename11texNSamplerE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename9texNScaleE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8texNBiasE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename11tex0SamplerE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename9tex0ScaleE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8tex0BiasE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename11tex1SamplerE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename9tex1ScaleE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8tex1BiasE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename11tex2SamplerE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename9tex2ScaleE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8tex2BiasE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename11tex3SamplerE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename9tex3ScaleE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8tex3BiasE[7] = {102, 108, 111, 97, 116, 52, 0};
.global .align 4 .b8 _ZN21rti_internal_typename8hasAlphaE[4] = {105, 110, 116, 0};
.global .align 8 .b8 _ZN21rti_internal_typename8constantE[6] = {102, 108, 111, 97, 116, 0};
.global .align 4 .b8 _ZN21rti_internal_typename7hit_prdE[4] = {72, 105, 116, 0};
.global .align 4 .u32 _ZN21rti_internal_typeenum16rayOriginSamplerE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum19rayDirectionSamplerE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum4rootE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12launch_indexE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum12backfaceTestE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9alphaTestE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3lodE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum24partialCoverageThresholdE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8hit_attrE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum3rayE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11texNSamplerE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9texNScaleE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8texNBiasE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11tex0SamplerE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9tex0ScaleE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tex0BiasE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11tex1SamplerE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9tex1ScaleE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tex1BiasE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11tex2SamplerE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9tex2ScaleE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tex2BiasE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum11tex3SamplerE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum9tex3ScaleE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8tex3BiasE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8hasAlphaE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum8constantE = 4919;
.global .align 4 .u32 _ZN21rti_internal_typeenum7hit_prdE = 4919;
.global .align 1 .b8 _ZN21rti_internal_semantic16rayOriginSamplerE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic19rayDirectionSamplerE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic4rootE[1];
.global .align 16 .b8 _ZN21rti_internal_semantic12launch_indexE[14] = {114, 116, 76, 97, 117, 110, 99, 104, 73, 110, 100, 101, 120, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic12backfaceTestE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9alphaTestE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic3lodE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic24partialCoverageThresholdE[1];
.global .align 16 .b8 _ZN21rti_internal_semantic8hit_attrE[19] = {97, 116, 116, 114, 105, 98, 117, 116, 101, 32, 104, 105, 116, 95, 97, 116, 116, 114, 0};
.global .align 16 .b8 _ZN21rti_internal_semantic3rayE[13] = {114, 116, 67, 117, 114, 114, 101, 110, 116, 82, 97, 121, 0};
.global .align 1 .b8 _ZN21rti_internal_semantic11texNSamplerE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9texNScaleE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8texNBiasE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11tex0SamplerE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9tex0ScaleE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tex0BiasE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11tex1SamplerE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9tex1ScaleE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tex1BiasE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11tex2SamplerE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9tex2ScaleE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tex2BiasE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic11tex3SamplerE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic9tex3ScaleE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8tex3BiasE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8hasAlphaE[1];
.global .align 1 .b8 _ZN21rti_internal_semantic8constantE[1];
.global .align 16 .b8 _ZN21rti_internal_semantic7hit_prdE[10] = {114, 116, 80, 97, 121, 108, 111, 97, 100, 0};
.global .align 1 .b8 _ZN23rti_internal_annotation16rayOriginSamplerE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation19rayDirectionSamplerE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation4rootE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12launch_indexE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation12backfaceTestE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9alphaTestE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3lodE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation24partialCoverageThresholdE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8hit_attrE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation3rayE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11texNSamplerE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9texNScaleE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8texNBiasE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11tex0SamplerE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9tex0ScaleE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tex0BiasE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11tex1SamplerE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9tex1ScaleE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tex1BiasE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11tex2SamplerE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9tex2ScaleE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tex2BiasE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation11tex3SamplerE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation9tex3ScaleE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8tex3BiasE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8hasAlphaE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation8constantE[1];
.global .align 1 .b8 _ZN23rti_internal_annotation7hit_prdE[1];

.visible .entry _Z9intersecti(
	.param .u32 _Z9intersecti_param_0
)
{
	.reg .pred 	%p<14>;
	.reg .f32 	%f<132>;
	.reg .b32 	%r<36>;
	.reg .b64 	%rd<94>;


	ld.param.u32 	%r2, [_Z9intersecti_param_0];
	cvt.s64.s32	%rd12, %r2;
	mov.u64 	%rd34, geometryMaterialIndex;
	cvta.global.u64 	%rd5, %rd34;
	mov.u32 	%r11, 1;
	mov.u32 	%r4, 4;
	mov.u64 	%rd33, 0;
	// inline asm
	call (%rd4), _rt_buffer_get_64, (%rd5, %r11, %r4, %rd12, %rd33, %rd33, %rd33);
	// inline asm
	ld.u32 	%r1, [%rd4];
	mov.u64 	%rd35, geometryIndex;
	cvta.global.u64 	%rd11, %rd35;
	mov.u32 	%r12, 12;
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r11, %r12, %rd12, %rd33, %rd33, %rd33);
	// inline asm
	ld.s32 	%rd18, [%rd10];
	mov.u64 	%rd36, vertexPosition;
	cvta.global.u64 	%rd17, %rd36;
	ld.s32 	%rd24, [%rd10+4];
	ld.s32 	%rd30, [%rd10+8];
	// inline asm
	call (%rd16), _rt_buffer_get_64, (%rd17, %r11, %r12, %rd18, %rd33, %rd33, %rd33);
	// inline asm
	ld.f32 	%f3, [%rd16+8];
	ld.f32 	%f2, [%rd16+4];
	ld.f32 	%f1, [%rd16];
	// inline asm
	call (%rd22), _rt_buffer_get_64, (%rd17, %r11, %r12, %rd24, %rd33, %rd33, %rd33);
	// inline asm
	ld.f32 	%f20, [%rd22+8];
	ld.f32 	%f21, [%rd22+4];
	ld.f32 	%f22, [%rd22];
	// inline asm
	call (%rd28), _rt_buffer_get_64, (%rd17, %r11, %r12, %rd30, %rd33, %rd33, %rd33);
	// inline asm
	sub.f32 	%f4, %f22, %f1;
	sub.f32 	%f5, %f21, %f2;
	sub.f32 	%f6, %f20, %f3;
	ld.f32 	%f23, [%rd28+8];
	ld.f32 	%f24, [%rd28+4];
	ld.f32 	%f25, [%rd28];
	sub.f32 	%f7, %f1, %f25;
	sub.f32 	%f8, %f2, %f24;
	sub.f32 	%f9, %f3, %f23;
	mul.f32 	%f26, %f6, %f8;
	mul.f32 	%f27, %f5, %f9;
	sub.f32 	%f10, %f26, %f27;
	mul.f32 	%f28, %f4, %f9;
	mul.f32 	%f29, %f6, %f7;
	sub.f32 	%f11, %f28, %f29;
	mul.f32 	%f30, %f5, %f7;
	mul.f32 	%f31, %f4, %f8;
	sub.f32 	%f12, %f30, %f31;
	ld.global.f32 	%f13, [ray+12];
	ld.global.f32 	%f14, [ray+16];
	mul.f32 	%f32, %f14, %f11;
	fma.rn.f32 	%f33, %f13, %f10, %f32;
	ld.global.f32 	%f15, [ray+20];
	fma.rn.f32 	%f16, %f15, %f12, %f33;
	setp.ge.f32	%p1, %f16, 0f00000000;
	ld.global.u32 	%r13, [backfaceTest];
	setp.ne.s32	%p2, %r13, 0;
	and.pred  	%p3, %p2, %p1;
	@%p3 bra 	BB0_4;

	rcp.rn.f32 	%f34, %f16;
	ld.global.f32 	%f35, [ray];
	sub.f32 	%f36, %f1, %f35;
	ld.global.f32 	%f37, [ray+4];
	sub.f32 	%f38, %f2, %f37;
	ld.global.f32 	%f39, [ray+8];
	sub.f32 	%f40, %f3, %f39;
	mul.f32 	%f41, %f34, %f36;
	mul.f32 	%f42, %f34, %f38;
	mul.f32 	%f43, %f34, %f40;
	mul.f32 	%f44, %f14, %f43;
	mul.f32 	%f45, %f42, %f15;
	sub.f32 	%f46, %f44, %f45;
	mul.f32 	%f47, %f41, %f15;
	mul.f32 	%f48, %f43, %f13;
	sub.f32 	%f49, %f47, %f48;
	mul.f32 	%f50, %f42, %f13;
	mul.f32 	%f51, %f41, %f14;
	sub.f32 	%f52, %f50, %f51;
	mul.f32 	%f53, %f8, %f49;
	fma.rn.f32 	%f54, %f7, %f46, %f53;
	fma.rn.f32 	%f17, %f9, %f52, %f54;
	mul.f32 	%f55, %f5, %f49;
	fma.rn.f32 	%f56, %f4, %f46, %f55;
	fma.rn.f32 	%f18, %f6, %f52, %f56;
	mul.f32 	%f57, %f11, %f42;
	fma.rn.f32 	%f58, %f10, %f41, %f57;
	fma.rn.f32 	%f19, %f12, %f43, %f58;
	ld.global.f32 	%f59, [ray+32];
	setp.lt.f32	%p4, %f19, %f59;
	ld.global.f32 	%f60, [ray+28];
	setp.gt.f32	%p5, %f19, %f60;
	and.pred  	%p6, %p4, %p5;
	setp.ge.f32	%p7, %f17, 0f00000000;
	and.pred  	%p8, %p6, %p7;
	setp.ge.f32	%p9, %f18, 0f00000000;
	and.pred  	%p10, %p8, %p9;
	add.f32 	%f61, %f17, %f18;
	setp.le.f32	%p11, %f61, 0f3F800000;
	and.pred  	%p12, %p10, %p11;
	@!%p12 bra 	BB0_4;
	bra.uni 	BB0_2;

BB0_2:
	// inline asm
	call (%r14), _rt_potential_intersection, (%f19);
	// inline asm
	setp.eq.s32	%p13, %r14, 0;
	@%p13 bra 	BB0_4;

	mov.b32 	 %r35, %f19;
	st.global.v2.u32 	[hit_attr], {%r35, %r2};
	st.global.f32 	[hit_attr+12], %f17;
	st.global.f32 	[hit_attr+16], %f18;
	mov.u64 	%rd91, vertexTexcoord;
	cvta.global.u64 	%rd38, %rd91;
	mov.u32 	%r20, 8;
	// inline asm
	call (%rd37), _rt_buffer_get_64, (%rd38, %r11, %r20, %rd24, %rd33, %rd33, %rd33);
	// inline asm
	ld.v2.f32 	{%f63, %f64}, [%rd37];
	// inline asm
	call (%rd43), _rt_buffer_get_64, (%rd38, %r11, %r20, %rd30, %rd33, %rd33, %rd33);
	// inline asm
	ld.v2.f32 	{%f67, %f68}, [%rd43];
	mul.f32 	%f70, %f18, %f67;
	mul.f32 	%f72, %f18, %f68;
	fma.rn.f32 	%f73, %f17, %f63, %f70;
	fma.rn.f32 	%f74, %f17, %f64, %f72;
	// inline asm
	call (%rd49), _rt_buffer_get_64, (%rd38, %r11, %r20, %rd18, %rd33, %rd33, %rd33);
	// inline asm
	mov.f32 	%f75, 0f3F800000;
	sub.f32 	%f76, %f75, %f17;
	sub.f32 	%f77, %f76, %f18;
	ld.v2.f32 	{%f78, %f79}, [%rd49];
	fma.rn.f32 	%f82, %f77, %f79, %f74;
	fma.rn.f32 	%f83, %f77, %f78, %f73;
	st.global.v2.f32 	[hit_attr+24], {%f83, %f82};
	mov.u64 	%rd92, vertexNormal;
	cvta.global.u64 	%rd56, %rd92;
	// inline asm
	call (%rd55), _rt_buffer_get_64, (%rd56, %r11, %r12, %rd24, %rd33, %rd33, %rd33);
	// inline asm
	ld.f32 	%f84, [%rd55];
	ld.f32 	%f85, [%rd55+4];
	ld.f32 	%f86, [%rd55+8];
	// inline asm
	call (%rd61), _rt_buffer_get_64, (%rd56, %r11, %r12, %rd30, %rd33, %rd33, %rd33);
	// inline asm
	ld.f32 	%f87, [%rd61];
	mul.f32 	%f88, %f18, %f87;
	ld.f32 	%f89, [%rd61+4];
	mul.f32 	%f90, %f18, %f89;
	ld.f32 	%f91, [%rd61+8];
	mul.f32 	%f92, %f18, %f91;
	fma.rn.f32 	%f93, %f17, %f84, %f88;
	fma.rn.f32 	%f94, %f17, %f85, %f90;
	fma.rn.f32 	%f95, %f17, %f86, %f92;
	// inline asm
	call (%rd67), _rt_buffer_get_64, (%rd56, %r11, %r12, %rd18, %rd33, %rd33, %rd33);
	// inline asm
	ld.f32 	%f96, [%rd67];
	ld.f32 	%f97, [%rd67+4];
	ld.f32 	%f98, [%rd67+8];
	fma.rn.f32 	%f99, %f77, %f96, %f93;
	st.global.f32 	[hit_attr+44], %f99;
	fma.rn.f32 	%f100, %f77, %f98, %f95;
	fma.rn.f32 	%f101, %f77, %f97, %f94;
	st.global.v2.f32 	[hit_attr+48], {%f101, %f100};
	mov.u64 	%rd93, vertexTangent;
	cvta.global.u64 	%rd74, %rd93;
	mov.u32 	%r32, 16;
	// inline asm
	call (%rd73), _rt_buffer_get_64, (%rd74, %r11, %r32, %rd24, %rd33, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f102, %f103, %f104, %f105}, [%rd73];
	// inline asm
	call (%rd79), _rt_buffer_get_64, (%rd74, %r11, %r32, %rd30, %rd33, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f109, %f110, %f111, %f112}, [%rd79];
	mul.f32 	%f116, %f18, %f109;
	mul.f32 	%f117, %f18, %f110;
	mul.f32 	%f118, %f18, %f111;
	fma.rn.f32 	%f119, %f17, %f102, %f116;
	fma.rn.f32 	%f120, %f17, %f103, %f117;
	fma.rn.f32 	%f121, %f17, %f104, %f118;
	// inline asm
	call (%rd85), _rt_buffer_get_64, (%rd74, %r11, %r32, %rd18, %rd33, %rd33, %rd33);
	// inline asm
	ld.v4.f32 	{%f122, %f123, %f124, %f125}, [%rd85];
	fma.rn.f32 	%f129, %f77, %f124, %f121;
	fma.rn.f32 	%f130, %f77, %f123, %f120;
	fma.rn.f32 	%f131, %f77, %f122, %f119;
	st.global.v2.f32 	[hit_attr+56], {%f131, %f130};
	st.global.f32 	[hit_attr+64], %f129;
	st.global.v2.f32 	[hit_attr+32], {%f10, %f11};
	st.global.f32 	[hit_attr+40], %f12;
	// inline asm
	call (%r33), _rt_report_intersection, (%r1);
	// inline asm

BB0_4:
	ret;
}

	// .globl	_Z6boundsiPf
.visible .entry _Z6boundsiPf(
	.param .u32 _Z6boundsiPf_param_0,
	.param .u64 _Z6boundsiPf_param_1
)
{
	.reg .f32 	%f<22>;
	.reg .b32 	%r<9>;
	.reg .b64 	%rd<29>;


	ld.param.u64 	%rd25, [_Z6boundsiPf_param_1];
	ld.param.s32 	%rd3, [_Z6boundsiPf_param_0];
	mov.u64 	%rd26, geometryIndex;
	cvta.global.u64 	%rd2, %rd26;
	mov.u32 	%r7, 1;
	mov.u32 	%r8, 12;
	mov.u64 	%rd24, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r7, %r8, %rd3, %rd24, %rd24, %rd24);
	// inline asm
	ld.s32 	%rd9, [%rd1];
	mov.u64 	%rd27, vertexPosition;
	cvta.global.u64 	%rd8, %rd27;
	ld.s32 	%rd15, [%rd1+4];
	ld.s32 	%rd21, [%rd1+8];
	// inline asm
	call (%rd7), _rt_buffer_get_64, (%rd8, %r7, %r8, %rd9, %rd24, %rd24, %rd24);
	// inline asm
	ld.f32 	%f1, [%rd7+8];
	ld.f32 	%f2, [%rd7+4];
	ld.f32 	%f3, [%rd7];
	// inline asm
	call (%rd13), _rt_buffer_get_64, (%rd8, %r7, %r8, %rd15, %rd24, %rd24, %rd24);
	// inline asm
	ld.f32 	%f4, [%rd13+8];
	ld.f32 	%f5, [%rd13+4];
	ld.f32 	%f6, [%rd13];
	// inline asm
	call (%rd19), _rt_buffer_get_64, (%rd8, %r7, %r8, %rd21, %rd24, %rd24, %rd24);
	// inline asm
	ld.f32 	%f7, [%rd19+8];
	ld.f32 	%f8, [%rd19+4];
	ld.f32 	%f9, [%rd19];
	cvta.to.global.u64 	%rd28, %rd25;
	min.f32 	%f10, %f3, %f6;
	min.f32 	%f11, %f2, %f5;
	min.f32 	%f12, %f1, %f4;
	min.f32 	%f13, %f10, %f9;
	min.f32 	%f14, %f11, %f8;
	min.f32 	%f15, %f12, %f7;
	st.global.f32 	[%rd28], %f13;
	st.global.f32 	[%rd28+4], %f14;
	st.global.f32 	[%rd28+8], %f15;
	max.f32 	%f16, %f3, %f6;
	max.f32 	%f17, %f2, %f5;
	max.f32 	%f18, %f1, %f4;
	max.f32 	%f19, %f16, %f9;
	max.f32 	%f20, %f17, %f8;
	max.f32 	%f21, %f18, %f7;
	st.global.f32 	[%rd28+12], %f19;
	st.global.f32 	[%rd28+16], %f20;
	st.global.f32 	[%rd28+20], %f21;
	ret;
}

	// .globl	_Z10closestHitv
.visible .entry _Z10closestHitv(

)
{
	.reg .pred 	%p<3>;
	.reg .f32 	%f<236>;
	.reg .b32 	%r<31>;
	.reg .b64 	%rd<17>;


	mov.u32 	%r30, 0;
	mov.pred 	%p1, 0;
	@%p1 bra 	BB2_2;

BB2_1:
	mul.wide.s32 	%rd1, %r30, 16;
	mov.u64 	%rd2, hit_attr;
	add.s64 	%rd3, %rd2, %rd1;
	ld.global.v2.u64 	{%rd4, %rd5}, [%rd3];
	mov.u64 	%rd8, hit_prd;
	add.s64 	%rd9, %rd8, %rd1;
	st.global.v2.u64 	[%rd9], {%rd4, %rd5};
	add.s32 	%r30, %r30, 1;
	setp.lt.u32	%p2, %r30, 11;
	@%p2 bra 	BB2_1;

BB2_2:
	ld.global.v2.u32 	{%r21, %r22}, [launch_index];
	cvt.u64.u32	%rd12, %r21;
	cvt.u64.u32	%rd13, %r22;
	mov.u64 	%rd16, positionOutBuffer;
	cvta.global.u64 	%rd11, %rd16;
	mov.u32 	%r19, 2;
	mov.u32 	%r5, 16;
	mov.u64 	%rd15, 0;
	// inline asm
	call (%rd10), _rt_buffer_get_64, (%rd11, %r19, %r5, %rd12, %rd13, %rd15, %rd15);
	// inline asm
	ld.global.f32 	%f41, [ray+12];
	ld.global.f32 	%f42, [ray+16];
	ld.global.f32 	%f43, [ray+20];
	ld.global.f32 	%f44, [ray];
	ld.global.f32 	%f45, [ray+4];
	ld.global.f32 	%f46, [ray+8];
	ld.global.f32 	%f47, [hit_prd];
	fma.rn.f32 	%f48, %f47, %f43, %f46;
	fma.rn.f32 	%f49, %f47, %f42, %f45;
	fma.rn.f32 	%f50, %f47, %f41, %f44;
	st.v4.f32 	[%rd10], {%f50, %f49, %f48, %f47};
	ld.global.u32 	%r6, [texNSampler];
	ld.global.v2.f32 	{%f51, %f52}, [hit_attr+24];
	ld.global.u32 	%r25, [lod];
	cvt.rn.f32.s32	%f8, %r25;
	mov.f32 	%f39, 0f00000000;
	mov.u32 	%r20, 0;
	// inline asm
	call (%f1, %f2, %f3, %f4), _rt_texture_get_level_id, (%r6, %r19, %f51, %f52, %f39, %r20, %f8);
	// inline asm
	ld.global.v4.f32 	{%f53, %f54, %f55, %f56}, [texNScale];
	ld.global.v4.f32 	{%f61, %f62, %f63, %f64}, [texNBias];
	fma.rn.f32 	%f69, %f4, %f56, %f64;
	fma.rn.f32 	%f70, %f3, %f55, %f63;
	fma.rn.f32 	%f71, %f2, %f54, %f62;
	fma.rn.f32 	%f72, %f1, %f53, %f61;
	st.global.v4.f32 	[hit_prd+80], {%f72, %f71, %f70, %f69};
	ld.global.u32 	%r9, [tex0Sampler];
	ld.global.v2.f32 	{%f73, %f74}, [hit_attr+24];
	ld.global.u32 	%r26, [lod];
	cvt.rn.f32.s32	%f16, %r26;
	// inline asm
	call (%f9, %f10, %f11, %f12), _rt_texture_get_level_id, (%r9, %r19, %f73, %f74, %f39, %r20, %f16);
	// inline asm
	ld.global.v4.f32 	{%f75, %f76, %f77, %f78}, [tex0Scale];
	ld.global.v4.f32 	{%f83, %f84, %f85, %f86}, [tex0Bias];
	fma.rn.f32 	%f91, %f12, %f78, %f86;
	fma.rn.f32 	%f92, %f11, %f77, %f85;
	fma.rn.f32 	%f93, %f10, %f76, %f84;
	fma.rn.f32 	%f94, %f9, %f75, %f83;
	st.global.v4.f32 	[hit_prd+96], {%f94, %f93, %f92, %f91};
	ld.global.u32 	%r12, [tex1Sampler];
	ld.global.v2.f32 	{%f95, %f96}, [hit_attr+24];
	ld.global.u32 	%r27, [lod];
	cvt.rn.f32.s32	%f24, %r27;
	// inline asm
	call (%f17, %f18, %f19, %f20), _rt_texture_get_level_id, (%r12, %r19, %f95, %f96, %f39, %r20, %f24);
	// inline asm
	ld.global.v4.f32 	{%f97, %f98, %f99, %f100}, [tex1Scale];
	ld.global.v4.f32 	{%f105, %f106, %f107, %f108}, [tex1Bias];
	fma.rn.f32 	%f113, %f20, %f100, %f108;
	fma.rn.f32 	%f114, %f19, %f99, %f107;
	fma.rn.f32 	%f115, %f18, %f98, %f106;
	fma.rn.f32 	%f116, %f17, %f97, %f105;
	st.global.v4.f32 	[hit_prd+112], {%f116, %f115, %f114, %f113};
	ld.global.u32 	%r15, [tex2Sampler];
	ld.global.v2.f32 	{%f117, %f118}, [hit_attr+24];
	ld.global.u32 	%r28, [lod];
	cvt.rn.f32.s32	%f32, %r28;
	// inline asm
	call (%f25, %f26, %f27, %f28), _rt_texture_get_level_id, (%r15, %r19, %f117, %f118, %f39, %r20, %f32);
	// inline asm
	ld.global.v4.f32 	{%f119, %f120, %f121, %f122}, [tex2Scale];
	ld.global.v4.f32 	{%f127, %f128, %f129, %f130}, [tex2Bias];
	fma.rn.f32 	%f135, %f28, %f122, %f130;
	fma.rn.f32 	%f136, %f27, %f121, %f129;
	fma.rn.f32 	%f137, %f26, %f120, %f128;
	fma.rn.f32 	%f138, %f25, %f119, %f127;
	st.global.v4.f32 	[hit_prd+128], {%f138, %f137, %f136, %f135};
	ld.global.u32 	%r18, [tex3Sampler];
	ld.global.v2.f32 	{%f139, %f140}, [hit_attr+24];
	ld.global.u32 	%r29, [lod];
	cvt.rn.f32.s32	%f40, %r29;
	// inline asm
	call (%f33, %f34, %f35, %f36), _rt_texture_get_level_id, (%r18, %r19, %f139, %f140, %f39, %r20, %f40);
	// inline asm
	ld.global.v4.f32 	{%f141, %f142, %f143, %f144}, [tex3Scale];
	ld.global.v4.f32 	{%f149, %f150, %f151, %f152}, [tex3Bias];
	fma.rn.f32 	%f157, %f36, %f144, %f152;
	fma.rn.f32 	%f158, %f35, %f143, %f151;
	fma.rn.f32 	%f159, %f34, %f142, %f150;
	fma.rn.f32 	%f160, %f33, %f141, %f149;
	st.global.v4.f32 	[hit_prd+144], {%f160, %f159, %f158, %f157};
	ld.global.f32 	%f161, [constant];
	st.global.f32 	[hit_prd+160], %f161;
	ld.global.v4.f32 	{%f162, %f163, %f164, %f165}, [hit_attr+32];
	ld.global.v4.f32 	{%f170, %f171, %f172, %f173}, [hit_attr+48];
	mul.f32 	%f175, %f170, %f170;
	fma.rn.f32 	%f176, %f165, %f165, %f175;
	fma.rn.f32 	%f178, %f171, %f171, %f176;
	sqrt.rn.f32 	%f179, %f178;
	rcp.rn.f32 	%f180, %f179;
	mul.f32 	%f183, %f173, %f173;
	fma.rn.f32 	%f184, %f172, %f172, %f183;
	ld.global.f32 	%f185, [hit_attr+64];
	fma.rn.f32 	%f186, %f185, %f185, %f184;
	sqrt.rn.f32 	%f187, %f186;
	rcp.rn.f32 	%f188, %f187;
	mul.f32 	%f189, %f188, %f173;
	mul.f32 	%f190, %f188, %f172;
	mul.f32 	%f191, %f180, %f171;
	mul.f32 	%f192, %f180, %f170;
	mul.f32 	%f193, %f188, %f185;
	st.global.v4.f32 	[hit_prd+48], {%f192, %f191, %f190, %f189};
	st.global.f32 	[hit_prd+64], %f193;
	mul.f32 	%f194, %f163, %f163;
	fma.rn.f32 	%f195, %f162, %f162, %f194;
	fma.rn.f32 	%f196, %f164, %f164, %f195;
	sqrt.rn.f32 	%f197, %f196;
	rcp.rn.f32 	%f198, %f197;
	mul.f32 	%f199, %f180, %f165;
	mul.f32 	%f200, %f198, %f164;
	mul.f32 	%f201, %f198, %f163;
	mul.f32 	%f202, %f198, %f162;
	st.global.v4.f32 	[hit_prd+32], {%f202, %f201, %f200, %f199};
	mul.f32 	%f203, %f189, %f191;
	mul.f32 	%f204, %f193, %f192;
	sub.f32 	%f205, %f203, %f204;
	mul.f32 	%f206, %f193, %f199;
	mul.f32 	%f207, %f190, %f191;
	sub.f32 	%f208, %f206, %f207;
	mul.f32 	%f209, %f190, %f192;
	mul.f32 	%f210, %f189, %f199;
	sub.f32 	%f211, %f209, %f210;
	mul.f32 	%f212, %f208, %f208;
	fma.rn.f32 	%f213, %f205, %f205, %f212;
	fma.rn.f32 	%f214, %f211, %f211, %f213;
	sqrt.rn.f32 	%f215, %f214;
	rcp.rn.f32 	%f216, %f215;
	mul.f32 	%f217, %f205, %f216;
	mul.f32 	%f218, %f208, %f216;
	mul.f32 	%f219, %f211, %f216;
	ld.global.v4.f32 	{%f220, %f221, %f222, %f223}, [hit_prd+80];
	mul.f32 	%f227, %f221, %f189;
	fma.rn.f32 	%f228, %f190, %f220, %f227;
	mul.f32 	%f229, %f218, %f221;
	fma.rn.f32 	%f230, %f217, %f220, %f229;
	fma.rn.f32 	%f231, %f219, %f222, %f230;
	fma.rn.f32 	%f232, %f222, %f193, %f228;
	st.global.v2.f32 	[hit_prd+80], {%f232, %f231};
	mul.f32 	%f233, %f221, %f192;
	fma.rn.f32 	%f234, %f220, %f199, %f233;
	fma.rn.f32 	%f235, %f222, %f191, %f234;
	st.global.f32 	[hit_prd+88], %f235;
	ret;
}

	// .globl	_Z19occlusionClosestHitv
.visible .entry _Z19occlusionClosestHitv(

)
{
	.reg .pred 	%p<3>;
	.reg .b32 	%r<5>;
	.reg .b64 	%rd<10>;


	mov.u32 	%r4, 0;
	mov.pred 	%p1, 0;
	@%p1 bra 	BB3_2;

BB3_1:
	mul.wide.s32 	%rd1, %r4, 16;
	mov.u64 	%rd2, hit_attr;
	add.s64 	%rd3, %rd2, %rd1;
	ld.global.v2.u64 	{%rd4, %rd5}, [%rd3];
	mov.u64 	%rd8, hit_prd;
	add.s64 	%rd9, %rd8, %rd1;
	st.global.v2.u64 	[%rd9], {%rd4, %rd5};
	add.s32 	%r4, %r4, 1;
	setp.lt.u32	%p2, %r4, 11;
	@%p2 bra 	BB3_1;

BB3_2:
	ret;
}

	// .globl	_Z6anyHitv
.visible .entry _Z6anyHitv(

)
{
	.reg .pred 	%p<5>;
	.reg .f32 	%f<15>;
	.reg .b32 	%r<4>;


	ld.global.u32 	%r1, [tex0Sampler];
	ld.global.v2.f32 	{%f10, %f11}, [hit_attr+24];
	mov.u32 	%r2, 2;
	mov.f32 	%f9, 0f00000000;
	// inline asm
	call (%f2, %f3, %f4, %f5), _rt_texture_get_f_id, (%r1, %r2, %f10, %f11, %f9, %f9);
	// inline asm
	ld.global.f32 	%f12, [tex0Scale+12];
	ld.global.f32 	%f13, [tex0Bias+12];
	fma.rn.f32 	%f1, %f5, %f12, %f13;
	ld.global.u32 	%r3, [alphaTest];
	setp.eq.s32	%p1, %r3, 0;
	@%p1 bra 	BB4_3;

	ld.global.f32 	%f14, [partialCoverageThreshold];
	setp.lt.f32	%p2, %f1, %f14;
	setp.eq.f32	%p3, %f1, 0f00000000;
	or.pred  	%p4, %p2, %p3;
	@!%p4 bra 	BB4_3;
	bra.uni 	BB4_2;

BB4_2:
	// inline asm
	call _rt_ignore_intersection, ();
	// inline asm

BB4_3:
	ret;
}

	// .globl	_Z4castv
.visible .entry _Z4castv(

)
{
	.local .align 16 .b8 	__local_depot5[176];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .f32 	%f<65>;
	.reg .b32 	%r<68>;
	.reg .b64 	%rd<53>;


	mov.u64 	%rd52, __local_depot5;
	cvta.local.u64 	%SP, %rd52;
	add.u64 	%rd1, %SP, 0;
	cvta.to.local.u64 	%rd44, %rd1;
	mov.u32 	%r30, -1;
	mov.u32 	%r31, -1082130432;
	st.local.v2.u32 	[%rd44], {%r31, %r30};
	ld.global.u32 	%r1, [rayOriginSampler];
	ld.global.v2.u32 	{%r32, %r33}, [launch_index];
	mov.u32 	%r28, 2;
	mov.u32 	%r14, 0;
	// inline asm
	call (%f1, %f2, %f3, %f4), _rt_texture_get_fetch_id, (%r1, %r28, %r32, %r33, %r14, %r14);
	// inline asm
	ld.global.u32 	%r7, [rayDirectionSampler];
	ld.global.v2.u32 	{%r34, %r35}, [launch_index];
	// inline asm
	call (%f5, %f6, %f7, %f8), _rt_texture_get_fetch_id, (%r7, %r28, %r34, %r35, %r14, %r14);
	// inline asm
	ld.global.u32 	%r13, [root];
	mov.u32 	%r15, 176;
	// inline asm
	call _rt_trace_64, (%r13, %f1, %f2, %f3, %f5, %f6, %f7, %r14, %f4, %f8, %rd1, %r15);
	// inline asm
	ld.global.v2.u32 	{%r36, %r37}, [launch_index];
	cvt.u64.u32	%rd4, %r36;
	cvt.u64.u32	%rd5, %r37;
	mov.u64 	%rd45, material0OutBuffer;
	cvta.global.u64 	%rd3, %rd45;
	mov.u32 	%r29, 16;
	mov.u64 	%rd43, 0;
	// inline asm
	call (%rd2), _rt_buffer_get_64, (%rd3, %r28, %r29, %rd4, %rd5, %rd43, %rd43);
	// inline asm
	ld.local.v4.f32 	{%f17, %f18, %f19, %f20}, [%rd44+96];
	st.v4.f32 	[%rd2], {%f17, %f18, %f19, %f20};
	ld.global.v2.u32 	{%r40, %r41}, [launch_index];
	cvt.u64.u32	%rd10, %r40;
	cvt.u64.u32	%rd11, %r41;
	mov.u64 	%rd46, material1OutBuffer;
	cvta.global.u64 	%rd9, %rd46;
	// inline asm
	call (%rd8), _rt_buffer_get_64, (%rd9, %r28, %r29, %rd10, %rd11, %rd43, %rd43);
	// inline asm
	ld.local.v4.f32 	{%f25, %f26, %f27, %f28}, [%rd44+112];
	st.v4.f32 	[%rd8], {%f25, %f26, %f27, %f28};
	ld.global.v2.u32 	{%r44, %r45}, [launch_index];
	cvt.u64.u32	%rd16, %r44;
	cvt.u64.u32	%rd17, %r45;
	mov.u64 	%rd47, material2OutBuffer;
	cvta.global.u64 	%rd15, %rd47;
	// inline asm
	call (%rd14), _rt_buffer_get_64, (%rd15, %r28, %r29, %rd16, %rd17, %rd43, %rd43);
	// inline asm
	ld.local.v4.f32 	{%f33, %f34, %f35, %f36}, [%rd44+128];
	st.v4.f32 	[%rd14], {%f33, %f34, %f35, %f36};
	ld.global.v2.u32 	{%r48, %r49}, [launch_index];
	cvt.u64.u32	%rd22, %r48;
	cvt.u64.u32	%rd23, %r49;
	mov.u64 	%rd48, material3OutBuffer;
	cvta.global.u64 	%rd21, %rd48;
	// inline asm
	call (%rd20), _rt_buffer_get_64, (%rd21, %r28, %r29, %rd22, %rd23, %rd43, %rd43);
	// inline asm
	ld.local.v4.f32 	{%f41, %f42, %f43, %f44}, [%rd44+144];
	ld.local.f32 	%f45, [%rd44+160];
	st.v4.f32 	[%rd20], {%f41, %f42, %f43, %f45};
	ld.global.v2.u32 	{%r52, %r53}, [launch_index];
	cvt.u64.u32	%rd28, %r52;
	cvt.u64.u32	%rd29, %r53;
	mov.u64 	%rd49, hitLocationOutBuffer;
	cvta.global.u64 	%rd27, %rd49;
	// inline asm
	call (%rd26), _rt_buffer_get_64, (%rd27, %r28, %r29, %rd28, %rd29, %rd43, %rd43);
	// inline asm
	ld.local.f32 	%f49, [%rd44+12];
	ld.local.f32 	%f50, [%rd44+16];
	ld.local.u32 	%r56, [%rd44+4];
	cvt.rzi.u32.f32	%r57, %f50;
	cvt.rzi.u32.f32	%r58, %f49;
	ld.global.u32 	%r59, [backfaceTest];
	st.v4.u32 	[%rd26], {%r56, %r58, %r57, %r59};
	ld.global.v2.u32 	{%r60, %r61}, [launch_index];
	cvt.u64.u32	%rd34, %r60;
	cvt.u64.u32	%rd35, %r61;
	mov.u64 	%rd50, shadingNormalOutBuffer;
	cvta.global.u64 	%rd33, %rd50;
	// inline asm
	call (%rd32), _rt_buffer_get_64, (%rd33, %r28, %r29, %rd34, %rd35, %rd43, %rd43);
	// inline asm
	ld.local.v2.f32 	{%f51, %f52}, [%rd44+48];
	ld.local.f32 	%f53, [%rd44+44];
	ld.local.f32 	%f54, [%rd44+92];
	st.v4.f32 	[%rd32], {%f53, %f51, %f52, %f54};
	ld.global.v2.u32 	{%r64, %r65}, [launch_index];
	cvt.u64.u32	%rd40, %r64;
	cvt.u64.u32	%rd41, %r65;
	mov.u64 	%rd51, geometricNormalOutBuffer;
	cvta.global.u64 	%rd39, %rd51;
	// inline asm
	call (%rd38), _rt_buffer_get_64, (%rd39, %r28, %r29, %rd40, %rd41, %rd43, %rd43);
	// inline asm
	ld.local.v4.f32 	{%f57, %f58, %f59, %f60}, [%rd44+32];
	mov.f32 	%f64, 0f00000000;
	st.v4.f32 	[%rd38], {%f57, %f58, %f59, %f64};
	ret;
}

	// .globl	_Z13occlusionCastv
.visible .entry _Z13occlusionCastv(

)
{
	.local .align 16 .b8 	__local_depot6[176];
	.reg .b64 	%SP;
	.reg .b64 	%SPL;
	.reg .pred 	%p<2>;
	.reg .b16 	%rs<2>;
	.reg .f32 	%f<18>;
	.reg .b32 	%r<28>;
	.reg .b64 	%rd<11>;


	mov.u64 	%rd10, __local_depot6;
	cvta.local.u64 	%SP, %rd10;
	add.u64 	%rd1, %SP, 0;
	cvta.to.local.u64 	%rd8, %rd1;
	mov.u32 	%r18, -1;
	mov.u32 	%r19, -1082130432;
	st.local.v2.u32 	[%rd8], {%r19, %r18};
	ld.global.u32 	%r1, [rayOriginSampler];
	ld.global.v2.u32 	{%r20, %r21}, [launch_index];
	mov.u32 	%r16, 2;
	mov.u32 	%r12, 0;
	// inline asm
	call (%f1, %f2, %f3, %f4), _rt_texture_get_fetch_id, (%r1, %r16, %r20, %r21, %r12, %r12);
	// inline asm
	ld.global.u32 	%r7, [rayDirectionSampler];
	ld.global.v2.u32 	{%r22, %r23}, [launch_index];
	// inline asm
	call (%f5, %f6, %f7, %f8), _rt_texture_get_fetch_id, (%r7, %r16, %r22, %r23, %r12, %r12);
	// inline asm
	ld.global.u32 	%r13, [root];
	mov.u32 	%r17, 1;
	mov.u32 	%r15, 176;
	// inline asm
	call _rt_trace_64, (%r13, %f1, %f2, %f3, %f5, %f6, %f7, %r17, %f4, %f8, %rd1, %r15);
	// inline asm
	ld.local.f32 	%f17, [%rd8];
	setp.ge.f32	%p1, %f17, 0f00000000;
	selp.b16	%rs1, -1, 0, %p1;
	ld.global.v2.u32 	{%r24, %r25}, [launch_index];
	cvt.u64.u32	%rd4, %r24;
	cvt.u64.u32	%rd5, %r25;
	mov.u64 	%rd9, hitOutBuffer;
	cvta.global.u64 	%rd3, %rd9;
	mov.u64 	%rd7, 0;
	// inline asm
	call (%rd2), _rt_buffer_get_64, (%rd3, %r16, %r17, %rd4, %rd5, %rd7, %rd7);
	// inline asm
	st.u8 	[%rd2], %rs1;
	ret;
}

	// .globl	_Z9exceptionv
.visible .entry _Z9exceptionv(

)
{
	.reg .b32 	%r<2>;


	// inline asm
	call (%r1), _rt_get_exception_code, ();
	// inline asm
	ret;
}

	// .globl	_Z4missv
.visible .entry _Z4missv(

)
{
	.reg .f32 	%f<13>;
	.reg .b32 	%r<7>;
	.reg .b64 	%rd<8>;


	ld.global.f32 	%f1, [ray+12];
	ld.global.f32 	%f2, [ray+16];
	ld.global.f32 	%f3, [ray+20];
	ld.global.f32 	%f4, [ray];
	ld.global.f32 	%f5, [ray+4];
	ld.global.f32 	%f6, [ray+8];
	ld.global.v2.u32 	{%r3, %r4}, [launch_index];
	cvt.u64.u32	%rd3, %r3;
	cvt.u64.u32	%rd4, %r4;
	mov.u64 	%rd7, positionOutBuffer;
	cvta.global.u64 	%rd2, %rd7;
	ld.global.f32 	%f7, [hit_prd];
	mov.u32 	%r1, 2;
	mov.u32 	%r2, 16;
	mov.u64 	%rd6, 0;
	// inline asm
	call (%rd1), _rt_buffer_get_64, (%rd2, %r1, %r2, %rd3, %rd4, %rd6, %rd6);
	// inline asm
	fma.rn.f32 	%f8, %f7, %f3, %f6;
	fma.rn.f32 	%f9, %f7, %f2, %f5;
	fma.rn.f32 	%f10, %f7, %f1, %f4;
	st.v4.f32 	[%rd1], {%f10, %f9, %f8, %f7};
	mov.f32 	%f11, 0f3F800000;
	mov.f32 	%f12, 0f00000000;
	st.global.v4.f32 	[hit_prd+80], {%f12, %f12, %f12, %f11};
	st.global.v4.f32 	[hit_prd+96], {%f12, %f12, %f12, %f11};
	st.global.v4.f32 	[hit_prd+112], {%f12, %f12, %f12, %f11};
	st.global.v4.f32 	[hit_prd+128], {%f12, %f12, %f12, %f11};
	st.global.v4.f32 	[hit_prd+144], {%f12, %f12, %f12, %f11};
	st.global.v4.f32 	[hit_prd+32], {%f12, %f12, %f12, %f12};
	st.global.v2.f32 	[hit_prd+48], {%f12, %f12};
	ret;
}



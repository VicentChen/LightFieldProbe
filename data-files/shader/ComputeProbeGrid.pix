#include "octahedral.glsl"

uniform sampler2D   SphereSampler;
uniform samplerCube ProbeColorCubemap;
uniform int   NumSamples;
uniform float LobeSize;

out vec3 FragColor;

const int NUM_SPHERE_SAMPLERS = 4096;

vec3 pointOnUnitSphere(int i, int n)
{
	int k = NUM_SPHERE_SAMPLERS / n;
	int index = i * k;
	//vec3 point = sphereSamplers[index%NUM_SPHERE_SAMPLERS].xyz;
	int2 SampleTexCoord = int2(i/64,i%64);
	vec3 point = texelFetch(SphereSampler, ivec2(i/64,i%64),0).xyz;
	return point;
}

void main()
{
	vec3 Direction = octDecode(gl_FragCoord.xy/1024*2.0 - 1.0);
	vec3 Color = vec3(0.0);
	float SumWeight = 0.0;
	float Weight = 0.0;
	vec3 Offset;
	vec3 SampleDirection;
	vec3 TotalColor = vec3(0.0, 0.0, 0.0);

	for (int i = 0; i < NumSamples; i++)
	{
		Offset = pointOnUnitSphere(i, NumSamples);
		SampleDirection = normalize(Direction + LobeSize * Offset);
		Color = texture(ProbeColorCubemap, SampleDirection).xyz;
		Weight = max(dot(Direction, SampleDirection), 0.0);
		TotalColor = TotalColor + Color * Weight;
		SumWeight = SumWeight + Weight;
	}

	FragColor = TotalColor / SumWeight;
	//FragColor = texture(ProbeColorCubemap, Direction).xyz;
	//FragColor = texture(SphereSampler, gl_FragCoord.xy).xyz;
}
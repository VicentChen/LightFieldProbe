#include "Octahedral.glsl"

uniform sampler2D   SphereSampler;
uniform samplerCube RadianceCubemap;
uniform samplerCube DistanceCubemap;

uniform int NumSamples;
uniform int OctmapResolution;

out vec3  octIrradiance;
out vec2  octMeanDistance;
out float octLowResDistance;

const int NUM_SPHERE_SAMPLERS = 4096;

vec3 pointOnUnitSphere(int i, int n)
{
	int k = NUM_SPHERE_SAMPLERS / n;
	int index = i * k;
	int2 SampleTexCoord = int2(i/64,i%64);
	vec3 point = texelFetch(SphereSampler, ivec2(i/64,i%64),0).xyz;
	return point;
}

void main()
{
	float SumDistance       = 0.0;
	float SumSquareDistance = 0.0;
	vec3 SumRadiance = vec3(0.0, 0.0, 0.0);
	vec3 Direction   = octDecode(gl_FragCoord.xy / OctmapResolution * 2.0 - 1.0);

	for (int i = 0; i < NumSamples; i++)
	{
		vec3 Offset = pointOnUnitSphere(i, NumSamples);
		vec3 SampleDirection = normalize(Direction + Offset);
		float CosineWeight      = max(dot(Direction, SampleDirection), 0.0);
		float PowerCosineWeight = pow(CosineWeight, 2.0);

		//Radiance
		vec3 Radiance = texture(RadianceCubemap, SampleDirection).xyz;
		SumRadiance += Radiance * CosineWeight;

		//Distance
		float Distance = length(texture(DistanceCubemap, SampleDirection, 0).xyz);
		float SquareDistance = pow(Distance, 2.0);
		SumDistance       += Distance * PowerCosineWeight;
		SumSquareDistance += SquareDistance * PowerCosineWeight;
	}

	octIrradiance     = SumRadiance / NumSamples;
	octMeanDistance.x = SumDistance / NumSamples;
	octMeanDistance.y = SumSquareDistance / NumSamples;
	octLowResDistance = length(texture(DistanceCubemap, Direction, 0).xyz);
}
#include "../Common/Octahedral.glsl"
#include <LightingEnvironment/LightingEnvironment_LightUniforms.glsl>

uniform samplerCube WsPositionFromProbe;

uniform samplerCube LambertianFromLight;
uniform samplerCube WsNormalFromLight;

uniform vec3 WsProbePosition;
uniform vec3 WsLightPosition;

uniform int OctmapResolution;
uniform sampler2D SphereSampler;

out vec3  octIrradiance;
out vec2  octMeanDistance;

ivec2 SphereSamplerSize = textureSize(SphereSampler, 0);

Color3 ComputeLighting(Vector3 lambertianReflectivity, Vector3 n, Vector3 w_o, Vector3 pos) {

	UniversalMaterialSample surfel;
	surfel.shadingNormal = n;
	surfel.position = pos;
	surfel.glossyShadingNormal = n;
	surfel.fresnelReflectionAtNormalIncidence = vec3(0.0,0.0,0.0);
	surfel.lambertianReflectivity = lambertianReflectivity;
	surfel.smoothness = 0.01;

	return computeDirectLighting(surfel, w_o, 1.0);
}

//Color3 addLightContribution(int I, UniversalMaterialSample surfel, Vector3 w_o, float backside)
//{
//	Color3 Contribution = Color3(0, 0, 0);
//	Vector3 w_i;
//	// Radial falloff and spotlight term. Separate glossy and lambertian values are computed
//	float attenuation = computeAttenuation(surfel.shadingNormal, light$(I)_position,
//		light$(I)_attenuation, light$(I)_softnessConstant, surfel.position, light$(I)_direction, light$(I)_up,
//		light$(I)_right, light$(I)_rectangular, light$(I)_radius, w_i);
//
//	if (attenuation > attenuationThreshold) 
//	{
//#           ifdef light$(I)_shadowMap_notNull
//		{
//			vec3 adjustedWSPos = surfel.position + w_o * (1.5 * light$(I)_shadowMap_bias) + surfel.shadingNormal * (backside * 0.5 * light$(I)_shadowMap_bias);
//			vec4 shadowCoord = light$(I)_shadowMap_MVP * vec4(adjustedWSPos, 1.0);
//
//			// Williams Shadow Map case
//
//			// "Normal offset shadow mapping" http://www.dissidentlogic.com/images/NormalOffsetShadows/GDC_Poster_NormalOffset.png
//			// Note that the normal bias must be > shadowMapBias$(I) to prevent self-shadowing; we use 3x here so that most
//			// glancing angles are OK.
//			float visibility = shadowMapVisibility(light$(I)_direction, light$(I)_position, light$(I)_attenuation, shadowCoord, light$(I)_shadowMap_buffer, light$(I)_shadowMap_invSize.xy, false);
//
//			// This line appears to miscompile on Radeon, causing everything to always be in shadow
//			//            if (visibility * attenuation <= attenuationThreshold) continue;
//
//#               ifdef light$(I)_shadowMap_variance_notNull
//			{
//				vec4 cFrameZRow = vec4(light$(I)_direction.xyz, -light$(I)_position.z);
//				float lightSpaceZ = dot(cFrameZRow, vec4(adjustedWSPos, 1.0));
//				lightSpaceZ = -dot(light$(I)_direction.xyz, adjustedWSPos - light$(I)_position.xyz);
//
//				// Variance Shadow Map case
//				visibility = min(visibility, varianceShadowMapVisibility(shadowCoord, lightSpaceZ, light$(I)_shadowMap_variance_buffer, light$(I)_shadowMap_variance_lightBleedReduction));
//			}
//#               endif
//			attenuation *= visibility;
//		}
//#           endif
//
//		if (attenuation > attenuationThreshold) 
//		{
//			// The "attenuation" includes geometric attenuation for angle, i.e., "the cosine" factor
//			Contribution = attenuation * light$(I)_color * evaluateUniversalMaterialBSDF(surfel, w_i, w_o);
//		} // if attenuation > threshold
//	} // if attenuation > threshold
//
//	return Contribution;
//}

//*******************************************************************************************************//
//NOTE: 这里的思路是从光源处出发渲染场景的Normal和Lambertian信息，这些信息对于间接光照的Radiance采样而言是完备的//
//      但会存在光源位置距离场景太远或者角度太偏产生走样问题，需要做实验量化其影响								 //
//																										 //
//      另一个思路是，直接从Probe位置出发，渲染低分辨率的Normal和Lambertian信息，与DDGI18年使用光线跟踪做主光线 //
//      求交不同的是，该思路使用低分辨率的光栅化来做主光线求交，存在的潜在问题是分辨率不够导致信息丢失，插值出来的 //
//      Irradiance Map失真，同样需要做实验量化与前一个思路的效率和带宽上的影响								 //
//*******************************************************************************************************//

void main()
{
	float SumDistance = 0.0;
	float SumSquareDistance = 0.0;
	vec3 SumRadiance = vec3(0.0, 0.0, 0.0);
	vec3 Direction = octDecode(gl_FragCoord.xy / OctmapResolution * 2.0 - 1.0);

	int SampleNum = SphereSamplerSize.x * SphereSamplerSize.y;

	for (int i = 0; i < SampleNum; i++)
	{
		vec3 SphereSampleDirection = texelFetch(SphereSampler, ivec2(i / SphereSamplerSize.x, i % SphereSamplerSize.y), 0).xyz;
		if (dot(SphereSampleDirection, Direction) > 0)
		{
			vec3 WsPosFromProbe = texture(WsPositionFromProbe, SphereSampleDirection).xyz;
			vec3 ProbeSampleDirection = normalize(WsPosFromProbe - WsProbePosition);

			float CosineWeight = max(dot(Direction, SphereSampleDirection), 0.0);
			float PowerCosineWeight = pow(CosineWeight, 2.0);

			//Add contribution of each light
			//for (int i = 0; i < NUM_LIGHT; i++)
			//{
			//	UniversalMaterialSample surfel;
			//	surfel.shadingNormal = n;
			//	surfel.position = pos;
			//	surfel.glossyShadingNormal = n;
			//	surfel.fresnelReflectionAtNormalIncidence = vec3(0.0, 0.0, 0.0);
			//	surfel.lambertianReflectivity = lambertianReflectivity;
			//	surfel.smoothness = 0.01;

			//	vec3 Radiance = addLightContribution(i, surfel, -ProbeSampleDirection, 1.0);
			//	SumRadiance += Radiance * CosineWeight;
			//}

			//Radiance
			vec3 LightSampleDirection = normalize(WsPosFromProbe - WsLightPosition);
			vec3 NormalFromLight = texture(WsNormalFromLight, LightSampleDirection).xyz;
			vec3 Lambertian = texture(LambertianFromLight, LightSampleDirection).xyz;
			vec3 Radiance = ComputeLighting(Lambertian, NormalFromLight, -ProbeSampleDirection, WsPosFromProbe);
			SumRadiance += Radiance * CosineWeight;

			//Distance
			float Distance = length(WsProbePosition - WsPosFromProbe);
			float SquareDistance = pow(Distance, 2.0);
			SumDistance += Distance * PowerCosineWeight;
			SumSquareDistance += SquareDistance * PowerCosineWeight * PowerCosineWeight;
		}
	}

	octIrradiance = SumRadiance / (SampleNum * 0.5);
	octMeanDistance.x = SumDistance / (SampleNum * 0.5);
	octMeanDistance.y = SumSquareDistance / (SampleNum * 0.5);
}
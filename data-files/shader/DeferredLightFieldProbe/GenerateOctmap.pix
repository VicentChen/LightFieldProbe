#include "../Common/Octahedral.glsl"
#include <LightingEnvironment/LightingEnvironment_LightUniforms.glsl>

uniform samplerCube WsPositionFromProbe;

uniform samplerCube WsPositionFromLight;
uniform samplerCube LambertianFromLight;
uniform samplerCube WsNormalFromLight;

uniform vec3 WsProbePosition;
uniform vec3 WsLightPosition;

uniform int OctmapResolution;
uniform sampler2D SphereSampler;

out vec3  octIrradiance;
out vec2  octMeanDistance;

ivec2 SphereSamplerSize = textureSize(SphereSampler, 0);

Color3 ComputeLighting(Vector3 lambertianReflectivity, Vector3 n, Vector3 w_o, Vector3 pos) {

	UniversalMaterialSample surfel;
	surfel.shadingNormal = n;
	surfel.position = pos;
	surfel.glossyShadingNormal = n;
	surfel.fresnelReflectionAtNormalIncidence = vec3(0.0,0.0,0.0);
	surfel.lambertianReflectivity = lambertianReflectivity;
	surfel.smoothness = 0.01;

	return computeDirectLighting(surfel, w_o, 1.0);
}

void main()
{
	float SumDistance = 0.0;
	float SumSquareDistance = 0.0;
	vec3 SumRadiance = vec3(0.0, 0.0, 0.0);
	vec3 Direction = octDecode(gl_FragCoord.xy / OctmapResolution * 2.0 - 1.0);

	int SampleNum = SphereSamplerSize.x * SphereSamplerSize.y;

	for (int i = 0; i < SampleNum; i++)
	{
		vec3 SphereSampleDirection = texelFetch(SphereSampler, ivec2(i / SphereSamplerSize.x, i % SphereSamplerSize.y), 0).xyz;
		if (dot(SphereSampleDirection, Direction) > 0)
		{
			vec3 WsPosFromProbe = texture(WsPositionFromProbe, SphereSampleDirection).xyz;
			vec3 LightSampleDirection = normalize(WsPosFromProbe - WsLightPosition);
			vec3 WsPosFromLight = texture(WsPositionFromLight, LightSampleDirection).xyz;

			vec3 NormalFromLight = texture(WsNormalFromLight, LightSampleDirection).xyz;
			vec3 ProbeSampleDirection = normalize(WsPosFromProbe - WsProbePosition);
			
			if ((length(WsPosFromProbe - WsLightPosition) - length(WsPosFromLight - WsLightPosition)) < 0.01 && (dot(NormalFromLight, -ProbeSampleDirection) > 0))
			{
				float CosineWeight = max(dot(Direction, SphereSampleDirection), 0.0);
				float PowerCosineWeight = pow(CosineWeight, 2.0);

				vec3 Lambertian = texture(LambertianFromLight, LightSampleDirection).xyz;

				//Radiance
				vec3 Radiance = ComputeLighting(Lambertian, NormalFromLight, -ProbeSampleDirection, WsPosFromLight);
				SumRadiance += Radiance * CosineWeight;

				//Distance
				float Distance = length(WsProbePosition - WsPosFromProbe);
				float SquareDistance = pow(Distance, 2.0);
				SumDistance += Distance * PowerCosineWeight;
				SumSquareDistance += SquareDistance * PowerCosineWeight * PowerCosineWeight;
			}
		}
	}

	octIrradiance = SumRadiance / (SampleNum * 0.5);
	octMeanDistance.x = SumDistance / (SampleNum * 0.5);
	octMeanDistance.y = SumSquareDistance / (SampleNum * 0.5);
}
#version 440
#include <g3dmath.glsl>
#include <Light/Light.glsl>
#include <GBuffer/GBuffer.glsl>

// Declare a GBuffer with no prefix
uniform_GBuffer(gbuffer_);
#include <deferredHelpers.glsl>

#include "LightFieldProbe.glsl"
#include "BRDFImportanceSampling.glsl"

out vec3 IndirectDiffuseColor;
out vec3 IndirectGlossyColor;

uniform LightFieldSurface lightFieldSurface;
uniform int seed;
uniform int numofSamples;

float3 ggxIndirectGlossy(LightFieldSurface lightFieldSurface, inout uint rndSeed, vec3 posW, vec3 normalW, vec3 view, float smoothness, vec3 glossy, int samplescount)
{
	// We have to decide whether we sample our diffuse or specular/ggx lobe.
	// We'll need NdotV for both diffuse and specular
	float NdotV = saturate(dot(normalW, view));

	vec3 sum = vec3(0);

	float roughness = pow(1.0 - smoothness, 2) + 0.01;
	//roughness = 1 - roughness;
	roughness = 0.01;
	for (int i = 0; i < samplescount; i++)
	{
		vec2 randVal = float2(rand_next(rndSeed), rand_next(rndSeed));
		// If we randomly selected to sample our diffuse lobe
		// Randomly sample the NDF to get a microfacet in our BRDF to reflect off of
		vec3 H = getGGXMicrofacet(randVal, normalW, roughness);

		// Compute the outgoing direction based on this (perfectly reflective) microfacet
		vec3 L = reflect(-view, H);

		// Compute our color by tracing a ray in this direction
		vec3 bounceColor = computeGlossyRay(lightFieldSurface, posW, view, H);
		return bounceColor;
		// Check to make sure our randomly selected, normal mapped diffuse ray didn't go below the surface.
		if (dot(normalW, L) <= 0.0f) bounceColor = vec3(0, 0, 0);

		// Compute some dot products needed for shading
		float NdotL = saturate(dot(normalW, L));
		float NdotH = saturate(dot(normalW, H));
		float LdotH = saturate(dot(L, H));

		float D = evalGGX(roughness, NdotH) * M_INV_PI; // Our GGX function does not include division by PI
		float G = evalSmithGGX(NdotL, NdotV, roughness); // Includes division by 4 * NdotL * NdotV
		vec3 f90 = vec3(0.5 + 2 * roughness *pow(dot(((L - view) / 2.0), L), 2));
		vec3 F = fresnelSchlick(vec3(0.1), f90, LdotH);
		//vec3 F = schlickFresnel(glossy, NdotV, smoothness); //g3d inside func
		vec3 brdf = D * G * F;

		// Probability of sampling vector H from getGGXMicrofacet()
		float ggxProb = D * NdotH / (4 * LdotH);

		// Accumulate the color:  ggx-BRDF * incomingLight * NdotL / probability-of-sampling
		sum += NdotL * bounceColor * brdf / (ggxProb);

	}

	return (sum / samplescount);
}

void main()
{
	int2 P = int2(gl_FragCoord.xy);

	Vector3 w_o;
	UniversalMaterialSample surfel;
	readUniversalMaterialSampleFromGBuffer(P, false, true, w_o, surfel);
	vec3 IndirectGlossyLighting = vec3(0);
	vec3 IndirectDiffuseLighting = vec3(0);

#if ENABLE_INDIRECT_DIFFUSE
	IndirectDiffuseLighting  = computePrefilteredIrradiance(lightFieldSurface, surfel.position, surfel.shadingNormal);
#endif

#if ENABLE_INDIRECT_GLOSSY
	uint seed_s = uint(seed*gl_FragCoord.x*(sin(gl_FragCoord.y) + 2));
	rand_next(seed_s);
	IndirectGlossyLighting = ggxIndirectGlossy(lightFieldSurface, seed_s, surfel.position, surfel.shadingNormal, w_o, surfel.smoothness, surfel.fresnelReflectionAtNormalIncidence, numofSamples);
#endif

	IndirectDiffuseColor = 0.6 * IndirectDiffuseLighting * surfel.lambertianReflectivity / pi;
	IndirectGlossyColor   = saturate(0.4*IndirectGlossyLighting);
}
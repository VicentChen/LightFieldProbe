#version 440
#include <g3dmath.glsl>
#include <Light/Light.glsl>
#include <GBuffer/GBuffer.glsl>

// Declare a GBuffer with no prefix
uniform_GBuffer(gbuffer_);
#include <deferredHelpers.glsl>

#include "LightFieldProbe.glsl"

out vec3 Color;

uniform LightFieldSurface lightFieldSurface;

void main()
{
	int2 P = int2(gl_FragCoord.xy);

	Vector3 w_o;
	UniversalMaterialSample surfel;

	readUniversalMaterialSampleFromGBuffer(P, false, true, w_o, surfel);

	vec3 IndirectDiffuseLighting = computePrefilteredIrradiance(lightFieldSurface, surfel.position, surfel.shadingNormal);
	vec3 IndirectGlossyLighting = computeGlossyRay(lightFieldSurface, surfel.position, w_o, surfel.shadingNormal);

	Color = IndirectDiffuseLighting * surfel.lambertianReflectivity / pi;
}